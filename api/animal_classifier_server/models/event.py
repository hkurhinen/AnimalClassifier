# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from animal_classifier_server.models.base_model_ import Model
from animal_classifier_server.models.classification import Classification
from animal_classifier_server import util

from animal_classifier_server.models.classification import Classification  # noqa: E501

class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, image=None, classifications=None, latitude=None, longitude=None, created=None, modified=None):  # noqa: E501
        """Event - a model defined in OpenAPI

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param image: The image of this Event.  # noqa: E501
        :type image: str
        :param classifications: The classifications of this Event.  # noqa: E501
        :type classifications: List[Classification]
        :param latitude: The latitude of this Event.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Event.  # noqa: E501
        :type longitude: float
        :param created: The created of this Event.  # noqa: E501
        :type created: datetime
        :param modified: The modified of this Event.  # noqa: E501
        :type modified: datetime
        """
        self.openapi_types = {
            'id': int,
            'image': str,
            'classifications': List[Classification],
            'latitude': float,
            'longitude': float,
            'created': datetime,
            'modified': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'classifications': 'classifications',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'created': 'created',
            'modified': 'modified'
        }

        self._id = id
        self._image = image
        self._classifications = classifications
        self._latitude = latitude
        self._longitude = longitude
        self._created = created
        self._modified = modified

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Event.


        :return: The image of this Event.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Event.


        :param image: The image of this Event.
        :type image: str
        """

        self._image = image

    @property
    def classifications(self):
        """Gets the classifications of this Event.


        :return: The classifications of this Event.
        :rtype: List[Classification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """Sets the classifications of this Event.


        :param classifications: The classifications of this Event.
        :type classifications: List[Classification]
        """

        self._classifications = classifications

    @property
    def latitude(self):
        """Gets the latitude of this Event.


        :return: The latitude of this Event.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Event.


        :param latitude: The latitude of this Event.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Event.


        :return: The longitude of this Event.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Event.


        :param longitude: The longitude of this Event.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def created(self):
        """Gets the created of this Event.


        :return: The created of this Event.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Event.


        :param created: The created of this Event.
        :type created: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Event.


        :return: The modified of this Event.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Event.


        :param modified: The modified of this Event.
        :type modified: datetime
        """

        self._modified = modified
